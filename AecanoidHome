using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;


class Program
{

    public static void Main()
    {
        Random random = new Random();

        Initialize();

        int minLeft = 0;
        int maxLeft = 79;
        int minTop = 0;
        int maxTop = 22;

        char noBrick = ' ';
        char brick = '#';
        int ballTop = 9;
        int ballLeft = random.Next(1, maxLeft - 1);
        int paddleLeft = 30;

        int topDirection = -1;
        int leftDirection = -1;

        int myScore = 0;

        string myName = Console.ReadLine();
        string score = "Score: ";
        string name = "Name: ";
        string paddle = "<========>";


        char[,] bricks = new char[1, maxLeft];

        for (int row = 0; row < bricks.GetLength(0); row++)
        {
            for (int col = 0; col < bricks.GetLength(1); col++)
            {
                bricks[row, col] = brick;
            }
        }

        while (true)
        {
            //Ball movement
            if (ballLeft == minLeft)
            {
                leftDirection = 1;
            }

            if (ballLeft == maxLeft)
            {
                leftDirection = -1;
            }

            if (ballTop == minTop)
            {
                topDirection = 1;
            }

            if (ballTop == maxTop)
            {
                if (ballLeft >= paddleLeft && ballLeft <= paddleLeft + paddle.Length)
                {
                    topDirection = -1;
                }

                else
                {
                    // Game over
                    break;
                }
            }


            ballLeft = ballLeft + leftDirection;
            ballTop = ballTop + topDirection;

            if (ballTop < bricks.GetLength(0))
            {
                if (bricks[ballTop, ballLeft] == brick)
                {
                    bricks[ballTop, ballLeft] = noBrick;
                    myScore++;
                    topDirection = 1;
                }
                else if (bricks[ballTop, ballLeft] == noBrick)
                {
                    YouWin();
                }
            }

            // Render bricks
            for (int row = 0; row < bricks.GetLength(0); row++)
            {
                for (int col = 0; col < bricks.GetLength(1); col++)
                {
                    Console.SetCursorPosition(col, row);
                    Console.Write(bricks[row, col]);
                }
            }

            //Render ball
            Console.SetCursorPosition(ballLeft, ballTop);
            Console.Write("@");

            //Padd movement
            if (Console.KeyAvailable)
            {
                ConsoleKeyInfo pressed = Console.ReadKey();
                if (pressed.Key == ConsoleKey.LeftArrow)
                {
                    if (paddleLeft > minLeft)
                    {
                        // Move left
                        paddleLeft = paddleLeft - 2;
                    }
                }
                if (pressed.Key == ConsoleKey.RightArrow)
                {
                    if (paddleLeft <= maxLeft - paddle.Length)
                    {
                        // Move right    
                        paddleLeft = paddleLeft + 2;
                    }
                }
            }

            //Render paddle
            Console.SetCursorPosition(paddleLeft, maxTop);
            Console.WriteLine(paddle);

            //Name
            Console.SetCursorPosition(1, 23);
            Console.WriteLine(name + myName);

            //Score
            Console.SetCursorPosition(1, 24);
            Console.WriteLine(score + myScore);

            Thread.Sleep(200);
            Console.Clear();
        }

        GameOver();
        Again();
    }

    static void Initialize()
    {
        Console.BackgroundColor = ConsoleColor.White;
        Console.ForegroundColor = ConsoleColor.Blue;

        Console.SetCursorPosition(28, 10);
        Console.Write("Enter name: ");        
    }

    static void GameOver()
    {
        Console.ForegroundColor = ConsoleColor.Red;
        Console.SetCursorPosition(33, 10);
        Console.WriteLine("---GAME OVER---");
        Console.ReadLine();
    }

    static void YouWin()
    {
        Console.Clear();
        Console.ForegroundColor = ConsoleColor.Green;
        Console.SetCursorPosition(33, 10);
        Console.WriteLine("---YOU WIN!---");
        Console.ReadLine();

    }

    static void Again()
    {
        bool runAgain = true;
        Console.Clear();
        Console.SetCursorPosition(29, 10);
        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine("Press ENTER to try again!");
        Console.ForegroundColor = ConsoleColor.Black;
        Console.SetCursorPosition(29, 12);
        Console.WriteLine("Or press any key to exit!");

        while (runAgain == true)
        {
            if (Console.KeyAvailable)
            {
                ConsoleKeyInfo pressed = Console.ReadKey();
                if (pressed.Key == ConsoleKey.Enter)
                {
                    Main();
                }
                else if (pressed.Key != ConsoleKey.Enter)
                {
                    EndGame();
                }
            }
        }
    }

    static void EndGame()
    {
        Console.Clear();
        Console.ForegroundColor = ConsoleColor.Black;
        Console.SetCursorPosition(33, 10);
        Console.WriteLine("Thank you for playing!");
        Console.ReadLine();
        Environment.Exit(0);
    }

}
